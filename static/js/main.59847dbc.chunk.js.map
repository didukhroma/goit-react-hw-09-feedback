{"version":3,"sources":["Components/Button/Button.jsx","utils/capitalize.js","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Section/Section.jsx","Components/Statistics/Statistics.jsx","Components/Notification/Notification.jsx","Components/App/App.jsx","index.js","Components/Section/Section.module.css","Components/Button/Button.module.css"],"names":["Button","string","text","onIncrement","buttonText","charAt","toUpperCase","slice","type","onClick","className","styles","button","FeedbackOptions","good","neutral","bad","onLeaveFeedback","data","elements","Object","keys","map","elem","Section","title","children","section","Statistics","total","positivePercentage","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","totalFeedback","positiveFeedbackPercentage","Number","toFixed","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"sNAuBeA,EAnBA,SAAC,GAAsC,ICJ5BC,EDI2B,IAAnCC,YAAmC,MAA5B,SAA4B,EAAlBC,EAAkB,EAAlBA,YAK3BC,GCTkBH,EDSMC,GCRhBG,OAAO,GAAGC,cAAgBL,EAAOM,MAAM,GDUrD,OACE,wBAAQC,KAAK,SAASC,QAPC,WACvBN,EAAYD,IAMqCQ,UAAWC,IAAOC,OAAnE,SACGR,KESQS,EAnBS,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,gBACvCC,EAAO,CAAEJ,OAAMC,UAASC,OACxBG,EAAWC,OAAOC,KAAKH,GAC7B,OACE,mCACGC,EAASG,KAAI,SAAAC,GACZ,OAAO,cAAC,EAAD,CAAmBrB,KAAMqB,EAAMpB,YAAac,GAA/BM,S,gBCQbC,EAdC,SAAC,GAAqC,IAAD,IAAlCC,aAAkC,MAA1B,UAA0B,EAAfC,EAAe,EAAfA,SACpC,OACE,0BAAShB,UAAWC,IAAOgB,QAA3B,UACE,oBAAIjB,UAAWC,IAAOc,MAAtB,SAA8BA,IAC7BC,MCcQE,EAnBI,SAAC,GAAD,IAAGd,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKa,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,qCACE,4CACA,wCAAWhB,EAAX,OACA,0CAAaC,EAAb,OACA,uCAAUC,KACV,yCAAYa,KACZ,qDAAwBC,EAAxB,YCCWC,EARM,SAAC,GAAD,QAAGC,eAAH,MAAa,yBAAb,SACnB,4BAAIA,KCgESC,EA7DH,WACV,MAAwBC,mBAAS,GAAjC,mBAAOpB,EAAP,KAAaqB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOnB,EAAP,KAAgBqB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOlB,EAAP,KAAYqB,EAAZ,KAmBMC,EAAqB,WAEzB,OADcxB,EAAOC,EAAUC,GAY3BuB,EAAgBD,IAChBE,EATkC,WACtC,GAAa,IAAT1B,EAAY,OAAO,EACvB,IAAMe,EAAQS,IAGd,OADeG,QADqB3B,EAAOe,EAAS,KACHa,QAAQ,IAKxBC,GAEnC,OACE,eAAC,EAAD,CAASlB,MAAM,wBAAf,UACE,cAAC,EAAD,CACEX,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,gBAvCkB,SAAAf,GACtB,OAAQA,GACN,IAAK,OACHiC,EAAQrB,EAAO,GACf,MACF,IAAK,UACHsB,EAAWrB,EAAU,GACrB,MACF,IAAK,MACHsB,EAAOrB,EAAM,OAgCI,IAAlBuB,EACC,cAAC,EAAD,CAAcP,QAAQ,sBAEtB,cAAC,EAAD,CACElB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLa,MAAOU,EACPT,mBAAoBU,Q,MCvD9BI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,yB,kBCA7DD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,SAAW,4B","file":"static/js/main.59847dbc.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { capitalize } from '../../utils/capitalize';\nimport styles from './Button.module.css';\n\nconst Button = ({ text = 'Button', onIncrement }) => {\n  const handlerIncrement = () => {\n    onIncrement(text);\n  };\n\n  const buttonText = capitalize(text);\n\n  return (\n    <button type=\"button\" onClick={handlerIncrement} className={styles.button}>\n      {buttonText}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  text: PropTypes.string,\n  onIncrement: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","export const capitalize = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n","import Button from '../Button';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ good, neutral, bad, onLeaveFeedback }) => {\n  const data = { good, neutral, bad };\n  const elements = Object.keys(data);\n  return (\n    <>\n      {elements.map(elem => {\n        return <Button key={elem} text={elem} onIncrement={onLeaveFeedback} />;\n      })}\n    </>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\nimport styles from './Section.module.css';\n\nconst Section = ({ title = 'Section', children }) => {\n  return (\n    <section className={styles.section}>\n      <h1 className={styles.title}>{title}</h1>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <>\n    <h2>Statistics</h2>\n    <p>Good : {good} </p>\n    <p>Neutral :{neutral} </p>\n    <p>Bad : {bad}</p>\n    <p>Total : {total}</p>\n    <p>Positive feedback : {positivePercentage} %</p>\n  </>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n\nexport default Statistics;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message = \"We don't have feedback\" }) => (\n  <p>{message}</p>\n);\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import { useState } from 'react';\nimport FeedbackOptions from '../FeedbackOptions';\nimport Section from '../Section';\nimport Statistics from '../Statistics';\nimport Notification from '../Notification';\n\nconst App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleIncrement = text => {\n    switch (text) {\n      case 'good':\n        setGood(good + 1);\n        break;\n      case 'neutral':\n        setNeutral(neutral + 1);\n        break;\n      case 'bad':\n        setBad(bad + 1);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    const total = good + neutral + bad;\n    return total;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    if (good === 0) return 0;\n    const total = countTotalFeedback();\n    const positiveFeedbackPercentage = (good / total) * 100;\n    const result = Number(positiveFeedbackPercentage.toFixed(1));\n    return result;\n  };\n\n  const totalFeedback = countTotalFeedback();\n  const positiveFeedbackPercentage = countPositiveFeedbackPercentage();\n\n  return (\n    <Section title=\"Please leave feedback\">\n      <FeedbackOptions\n        good={good}\n        neutral={neutral}\n        bad={bad}\n        onLeaveFeedback={handleIncrement}\n      />\n      {totalFeedback === 0 ? (\n        <Notification message=\"No feedback given\" />\n      ) : (\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={totalFeedback}\n          positivePercentage={positiveFeedbackPercentage}\n        />\n      )}\n    </Section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2dnma\",\"title\":\"Section_title__23Y0W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__4ixxT\",\"disabled\":\"Button_disabled__1HLaN\"};"],"sourceRoot":""}